#!/usr/bin/env python3

import os
import sys
import ueberzug.lib.v0 as ueberzug
import time
import subprocess
from PIL import Image
import array, fcntl, termios
import select

# https://stackoverflow.com/a/31736883
class KeyPoller():
    def __enter__(self):
        self.fd = sys.stdin.fileno()
        self.new_term = termios.tcgetattr(self.fd)
        self.old_term = termios.tcgetattr(self.fd)

        self.new_term[3] = (self.new_term[3] & ~termios.ICANON & ~termios.ECHO)
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.new_term)

        return self

    def __exit__(self, type, value, traceback):
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old_term)

    def poll(self):
        dr,dw,de = select.select([sys.stdin], [], [], 0.0)
        if not dr == []:
            return sys.stdin.read(1)
        return None

@ueberzug.Canvas()
def main(canvas):
    # Columns, Rows number of char
    # Width, Height number of pixel
    image_path = sys.argv[1]
    image = Image.open(image_path)
    rows, columns = map(int, os.popen('stty size', 'r').read().split())
    buf = array.array('H', [0, 0, 0, 0])
    fcntl.ioctl(1, termios.TIOCGWINSZ, buf)
    terminal_width, terminal_height = buf[2], buf[3]
    image.thumbnail((terminal_width, terminal_height), Image.ANTIALIAS)
    image_width, image_height = image.size

    vertical_pixel_ratio = rows/terminal_height
    horizontal_pixel_ratio = columns/terminal_width

    canvas_height = rows

    if image_width > terminal_width:
        canvas_width = columns
        x, y = 0, 0
    else:
        x = int((terminal_width - image_width)/2 * horizontal_pixel_ratio)
        y = int((terminal_height - image_height)/2 * vertical_pixel_ratio)

        canvas_width = columns
        image = canvas.create_placement('image', x=x, y=y,
                width=canvas_width,
                height = rows-y,
                scaler=ueberzug.ScalerOption.FIT_CONTAIN.value)
        image.path = image_path
        image.visibility = ueberzug.Visibility.VISIBLE

        with KeyPoller() as keyPoller:
            while True:
                key = keyPoller.poll()
                rows, columns = map(int, os.popen('stty size', 'r').read().split())
                image.width = columns
                image.height = rows - y
                if key is not None:
                    if key == 'j':
                        image.y += 1
                    elif key == 'k':
                        image.y -= 1
                    elif key == 'l':
                        image.x += 1
                    elif key == 'h':
                        image.x -= 1
                    elif key == 'q' or ord(key) == 27:
                        break


if __name__ == '__main__':
    main()

